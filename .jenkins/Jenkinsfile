pipeline {
  agent{
    // dockerfile {
    //     filename 'Dockerfile'
    //     label 'docker'
    // }
    docker {
        image 'golang:1.18-alpine'
        label 'docker'
    }
  }

  environment {
    GOOS='windows'
    GOARCH='amd64'
    XDG_CACHE_HOME='/tmp/.cache'
    // jenkins managed credential
    CREDENTIALS_ID='blitz-esports'
    GCS_BUCKET='gs://jenkins-poc/go-web-dev'
  } 

  stages {
    stage("Setup Environment") {
      steps {
        echo "Golang OS: ${GOOS}"
        echo "Golang Arch: ${GOARCH}"
        // remove previous build dir, if exists
        sh "rm -rf go-web-dev"
      }
    }

    stage("Build") {
      steps {
        // build
        sh "go build -o build/ go-web-dev"
        sh "mkdir -p build/images/galleries"
        // copy static assets
        sh "cp -r ./config build/"
        sh "cp -r ./views build/"
        sh "rm build/views/*.go"
        // compress artifact
        sh "mv build go-web-dev"
        sh "tar -czf \"go-web-dev_${GOOS}_${GOARCH}.tar.gz\" go-web-dev"
      }
    }

    stage("Deploy") {
      steps {
        // store in jenkkins
        archiveArtifacts artifacts: '**/go-web-dev*.tar.gz', allowEmptyArchive: false
        // store in GCS w/ plugin
        step([$class: 'ClassicUploadStep', credentialsId: env.CREDENTIALS_ID,  bucket: "${env.BUCKET}",
                 pattern: '**/go-web-dev*.tar.gz'])
      }
    }
  }
}